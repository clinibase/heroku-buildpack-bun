#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
# $HOME: /app

# -e - always exit on error
# -o pipefail - don't ignore exit codes when piping output
set -eo pipefail

BUILD_DIR=${1:-.}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies
source "$BP_DIR/lib/json.sh"
source "$BP_DIR/lib/cache.sh"
source "$BP_DIR/lib/output.sh"

HEROKU_DIR=$BUILD_DIR/.heroku
BIN_DIR=$HEROKU_DIR/bin

export BUN_INSTALL_CACHE_DIR="$BUILD_DIR/.bun-cache"

# To enable the local source build cache path, copy the files and match the build path with the startup path.
cp -rp $BUILD_DIR $HOME
cd $HOME

# Export the content of the ENV_DIR into the environment
if [ -d "$ENV_DIR" ]; then
  for e in $(ls $ENV_DIR); do
    export "$e=$(cat $ENV_DIR/$e)"
  done
fi

# Allow Bun version pinning via a choice of 3 different files
if [ -f $BUILD_DIR/.bun-version ]
then
  BUN_VERSION="$(cat $BUILD_DIR/.bun-version)"
elif [ -f $BUILD_DIR/runtime.bun.txt ]
then
  BUN_VERSION="$(cat $BUILD_DIR/runtime.bun.txt)"
elif [ -f $BUILD_DIR/runtime.txt ]
then
  BUN_VERSION="$(cat $BUILD_DIR/runtime.txt)"
fi
header "Installing Bun $BUN_VERSION"

if [[ -n $BUN_VERSION ]]
then
  # prepend a v to version numbers, eg 1.0.19 -> v1.0.19
  if [[ $BUN_VERSION =~ ^[0-9] ]]; then
    BUN_VERSION="v${BUN_VERSION}"
  fi
  BUN_INSTALL_VERSION="-s bun-$BUN_VERSION"
fi

# install bun
export BUN_INSTALL=$BUILD_DIR/.heroku
export BUN_DIR=$BUILD_DIR/.heroku/cache
curl -fsSL --retry-connrefused --retry 3 https://bun.sh/install | bash $BUN_INSTALL_VERSION
export PATH="$BUN_INSTALL/bin:$PATH"

# set environment variables at runtime
PROFILE_PATH="$BUILD_DIR/.profile.d/bun.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$HOME/.heroku/bin:$PATH"' >> $PROFILE_PATH
echo 'export BUN_DIR="$HOME/.heroku/cache"' >> $PROFILE_PATH

# export environment variables to subsequent buildpacks
echo "export PATH=\"$BUILD_DIR/.heroku/bin:\$PATH\"" >> "$BP_DIR/export"
echo "export BUN_DIR=\"$BUILD_DIR/.heroku/cache\"" >> "$BP_DIR/export"

header "Installed Bun v$(bun --version)"

set +e

restore_cache() {
  local cache_status cache_directories

  cache_status="$(get_cache_status "$CACHE_DIR")"
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because BUN_CACHE=${BUN_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$BUN_INSTALL_CACHE_DIR"
    if [[ "$cache_directories" != "" ]]; then
      restore_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
    fi
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    echo "Cached directories were not restored due to a change in version of bun or stack"
    echo "Module installation may take longer for this build"
    if [[ "$cache_directories" != "" ]]; then
      # If the user has specified custom cache directories, be more explicit
      echo "Invalidating cache due to a change in version of node, npm, yarn or stack"
      echo "Will not restore the following directories for this build:"
      for directory in $cache_directories; do
        echo "  $directory"
      done
    fi
  else
    # No cache exists, be silent
    :
  fi
}

cache_build() {
  local cache_directories
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  clear_cache "$CACHE_DIR"
  if ! ${BUN_CACHE:-true}; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  else
    header "Caching build"
    save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$BUN_INSTALL_CACHE_DIR"
    if [[ "$cache_directories" != "" ]]; then
      save_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
    fi
  fi
  save_signature "$CACHE_DIR"
}

restore_cache

cd $BUILD_DIR

# download dependencies
if [[ -f package.json && ! -f .skip-bun-install ]]
then
  header "Installing dependencies..."
  bun install
fi

has_heroku_prebuild_script=$(has_script "package.json" "heroku-prebuild")
if [[ "$has_heroku_prebuild_script" == "true" && ! -f .skip-bun-heroku-prebuild ]]
then
  header "Running Heroku prebuild script..."
  bun run heroku-prebuild
fi

has_build_script=$(has_script "package.json" "build")
if [[ "$has_build_script" == "true" && ! -f .skip-bun-build ]]
then
  header "Building application..."
  bun run build
  header "Done building application..."
fi

cache_build

has_heroku_postbuild_script=$(has_script "package.json" "heroku-postbuild")
if [[ "$has_heroku_postbuild_script" == "true" && ! -f .skip-bun-heroku-postbuild ]]
then
  header "Running Heroku postbuild script..."
  bun run heroku-postbuild
fi

